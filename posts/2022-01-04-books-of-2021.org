#+title: Books of 2021
#+date: <2022-01-04 09:40>
#+filetags: books

** Hologrammatica

#+begin_export html
<figure style="float:left">
<img src="/static/2022-01/hologrammatica cover.jpg" alt="book cover for Hologrammatica" width="150px"/>
</figure>
#+end_export

In the last years, I have almost exclusively read books in English. Science fiction, in particular, seems to happen exclusively in English (and perhaps [[https://www.goodreads.com/series/189931-remembrance-of-earth-s-past][Chinese]]). So much so, that I have come to associate German only with bad translations and personal communications, whereas English was the language of science, engineering, and fiction. In 2021 however, to my surprise, I stumbled upon Tom Hillenbrand's /Hologrammatica/, an science fiction thriller in German. It was a peculiar experience, reading the familiar tropes of the genre in a different language. Somehow it made the story feel more immediate and approachable to me. Strange, what effect language can have.

In the book, humanity has decided to hide reality behind holograms. Clothes and hairstyles can be altered on the fly, street lighting is replaced with projected advertisements. The twist is that in this semi-dystopian world, everyone knows that the holograms hide the truth, which is a collapsed society and dilapidated infrastructure. It is a smart, very current backdrop for a detective story with mind uploads, space elevators, and all the modern trappings of science fiction. A thoroughly enjoyable read!

Sci-Fi honorable mentions: Andy Weir's pop sci-fi /Project Hail Mary/ and Martha Well's first novel-length murderbot entry /Fugitive Telemetry/.

** Not Much of an Engineer

#+begin_export html
<figure style="float:left">
<img src="/static/2022-01/not much of an engineer cover.jpg" alt="book cover for Not Much of an Engineer" width="150px"/>
</figure>
#+end_export

I have always been fascinated with aviation, and the technology of warfare. But most of the non-fiction I have read about these topics focuses on the stories of pilots and companies and soldiers, not engineers. In these stories some of the most important plot points came from advances in technology, yet they didn't describe how those changes came about. In 2021, I finally found a good history of aviation technology: Sir Stanley Hooker's /Not Much of an Engineer/ describes the work of the author as the principal engineer at Bristol and Rolls-Royce from the Merlin-era second world war engines to modern turbofans. I guess you need to be a bit of an aviation/engineering geek to enjoy this, but to me this book was an important missing link that I had always looked for.

Non-fiction honorable mentions: David Goodsell's /The Machinery of Life/ wonderfully illustrates the inner workings of cells.

** Crafting Interpreters

#+begin_export html
<figure style="float:left">
<img src="/static/2022-01/crafting interpreters cover.jpg" alt="book cover for Crafting Interpreters" width="150px"/>
</figure>
#+end_export

How do computers work? This question is surprisingly hard to answer. For me, the answer came in three books: Charles Petzold's /Code: The Hidden Language of Computer Hardware and Software/ explained to me how processors work. The Arpaci-Dusseau's [[https://pages.cs.wisc.edu/~remzi/OSTEP/][/Operating Systems: Three Easy Pieces/]] describes the infrastructure of operating systems that make processors and storage and network available to programs. And now, finally, Robert Nystrom's [[https://craftinginterpreters.com/][/Crafting Interpreters/]] filled in the last step, how a programming language is built.

The book describes two implementations of a simple programming language. The first one is a high-level introductory scripting language implemented in Java, the second a high-performance reimplementation in C. Fascinatingly, the entire source code for these implementations is included in the book's text, such that you can entirely follow along (or program along) and have a working programming language at all times. A truly eye-opening glimpse into the innards of the tools we are using every day. The book requires familiarity with Java and C to enjoy.
