#+title: OS Customization and MacOS
#+date: <2023-04-21 10:19>
#+description:
#+filetags: computers linux macos windows

I was an Apple fanboy some years ago. Back then, whenever something was odd on my computer, I was
surely just using it wrong. Nowadays, I see things the other way around: We're not "holding it
wrong", the computer is just defective. Computers should do our bidding, not vice versa. So here's a
bunch of things that I do to my computers to mold them to my way of working.

** Keyboard Layout

I switch constantly between a German and English keyboard layout, and regularly between various
machines. My physical keyboards are German, and my fingers are used to the Windows-default German and
(international) US keyboard layout. These are available by default on Windows and Linux, but MacOS
goes its own way.

However, keyboard layouts on MacOS are saved in relatively simple text files, and can be modified
with relative ease. The process goes like this: Download [[https://software.sil.org/ukelele/][Ukelele (free)]] to create a new keyboard
layout bundle for your base layout[fn:ukelele]. Inside that bundle, there's a /*.keylayout/ file,
which is an XML file that defines the characters that each key-modifier combination produces. I
changed that to create a Windows-like US keyboard layout. And I replaced the keyboard icon with
something sane (not "A") by creating a 256x256 pixel PNG, opening it in Preview, holding alt while
saving to select the ICNS format. Save the keyboard bundle to ~~/Library/Keyboard Layouts~ and
reboot. Then I remove the unremovable default ("A") German layout by selecting another one, then
~plutil -convert xml1 ~/Library/Preferences/com.apple.HIToolbox.plist~, and delete the entry from
~AppleEnabledInputSources~. Now reboot. Almost easy. Almost.

One the one hand, this was quite the ordeal. On the other, I have tried to do this sort of thing on
Windows and Linux before, and for the life of me /could not do it/. So I actually think this is
great!

[fn:ukelele] if there's an easier way to create a keyboard layout bundle, please let me know. I
didn't use ukelele for anything but the bundle creation.

** Keyboard Shortcuts

My main text editor is Emacs, and I am very used to its keyboard shortcuts. Of particular note are
CTRL-A/E for going to the beginning/end of a line, and Alt-B/F for navigating forward/backwards by
word. I have long wanted to use these shortcuts not just in Emacs and readline-enabled terminal
applications, but everywhere else, too. And with MacOS, this is finally possible: Install
[[https://folivora.ai/][BetterTouchTool ($22)]], and create keyboard shortcuts that maps, e.g. Alt-B/F to Alt-←/→. Ideally,
put this in a new activation group that excludes Emacs. It may be necessary to remove the keyboard
character for Alt-B/F from your keyboard layout before this works. I've spent an embarrassing number
of hours trying to get this to work on Windows and Linux, and really got nowhere[fn:autohotkey].
Actually, however, most readline shortcuts such as Ctrl-A/E/B/F/K/Y already work out of the box on
MacOS!

[fn:autohotkey] It occurs to me that it might actually be possible to do something like on Windows
this with [[https://www.autohotkey.com/][AutoHotkey (free)]]. I'll have to try that!

** Mouse Configuration

I generally use a trackpad, and occasionally a traditional mouse for image editing, and have used a
trackball. I find that any one specific device will lead to wrist pain if used constantly, so I
switch it up every now and then. The trackpad and trackball, however, need configuration to be
usable.

After experimenting with many a trackpad device, I have found Apple touch pads the best trackpads on
the market[fn:trackpads]. On MacOS, they lacks a middle mouse click. So I created a trackpad
shortcut in the aforementioned [[https://folivora.ai/][BetterTouchTool ($22)]] to map the middle click on a three-finger tap
(can also be had for free with [[https://github.com/artginzburg/MiddleClick-Ventura][MiddleClick (OSS)]]). For Windows, [[https://magicutilities.net/][Magic Utilities ($17/y)]] provides a
wonderful third-party driver for Apple devices that also supports the three-finger tap. I have not
gotten the Apple touch pad to pair reliably on Linux, and have generally found their touch pad
driver /libinput/ a bit lacking.

My trackball is a Kensington SlimBlade. To scroll, you rotate the ball around its vertical axis.
This is tedious for longer scroll distances, however. But there's an alternative scrolling method
called "button scrolling", where you hold one button on the trackball, and move the ball to scroll.
You need to install the Kensington driver to enable this on Windows and MacOS. Button scrolling is
available on Linux as well using xinput[fn:xinput], but I haven't gotten the setting to stick across
reboots or sleep cycles. So I wrote a background task that checks xinput every five seconds,
which does the trick.

[fn:trackpads] The Logitech T650 is actually not bad, but the drivers are a travesty. Some Wacom
tablets include touch, too, but they palm rejection is abysmal and they don't support gestures.

[fn:xinput] ~xinput set-prop "Kensington Slimblade Trackball" "libinput Scroll Method Enabled" 0, 0, 1 # button scrolling~ \\
~xinput set-prop "Kensington Slimblade Trackball" "libinput Button Scrolling Button" 8 # top-right button~

** Window Management

Frankly, Windows does window management correctly. Win-←/→ moves windows to the left and right edge
of the screen, as does dragging the window to the screen border. Further Win-←/→ then moves the
window to the next half-screen in that direction, even across display boundaries. KDE does this
correctly out of the box as well, Gnome does not do the latter, and it drives me mad. MacOS doesn't
do any of these things. But [[https://rectangleapp.com/][Rectangle (OSS)]] does. Easy fix. (BetterTouchTool can do it, too, but
Rectangle is prettier)

Furthermore, I want Alt-Tab to switch between windows. Again, MacOS is the odd one out, which uses
CMD-Tab to switch between /apps/, now windows. And then there's another shortcut for switching
between windows of the same app, but the shortcut really doesn't work at all on a German keyboard.
Who came up with this nonsense? Anyway, [[https://manytricks.com/witch/][Witch ($14)]] implements window switching properly.

** Application Management

In Windows and Linux, I hit the Windows key and start typing to select and start an app. In MacOS,
this is usually Cmd-Space, but BetterTouchTool can map it to a single short Cmd, if you prefer.

More annoying are the various docks and task bars. I always shove the dock off to the right edge of
the screen, where it stays out of the way. Windows 10 had a sane dock, but then 11 came and forced
it to the bottom of the screen. Dear OS makers, every modern screen has plenty of horizontal space.
But vertical space is somewhat limited. So why on earth would you make a rarely used menu such as
the dock consume that precious vertical space by default? And Microsoft, specifically, /why not make
it movable/? Thankfully, there's [[https://www.startallback.com/][StartAllBack ($5)]], which replaces the Windows task bar with
something sensible, and additionally cleans up the start menu if you so desire. On KDE, I
fractionally prefer [[https://github.com/KDE/latte-dock][Latte (OSS)]] over KDE's native dock. The MacOS dock is uniquely dumb, offering no
start menu, and allowing no window selections. But it's unobtrusive and can be moved to the right
edge, so it's not much of a bother.

** File Management

One of the most crucial tasks in computer work in general is file management. I am not satisfied
with most file managers. Dolphin on KDE works pretty well, it has tabs, can bulk-rename files, can
display large directories without crashing, and updates in real time when new files are added to the
current directory. Gnome Nautilus is so bad it is the main reason I switched to KDE on my Linux
machines. Finder on MacOS is passable, I suppose, although the left sidebar is unnecessarily
restrictive (why can't I add a shortcut to a network drive?). Windows Explorer is really rather
terrible, lacking a bulk-rename tool, and crucially, tabs. In Windows 10, these can be added with
[[https://www.stardock.com/products/groupy/][Groupy ($12)]] (set it to only apply to explorer.exe). Windows 11 has very recently added native tabs,
which work OK, but can't be detached from the window.

The sad thing is that there are plenty of very good file manager replacements out there, but none of
the OSs have a mechanism for replacing their native file manager in a consistent way, so we're
mostly stuck with the defaults.

Oh, and I always remove the iCloud/OneDrive sidebar entries, which is [[https://www.howtogeek.com/225973/how-to-disable-onedrive-and-remove-it-from-file-explorer-on-windows-10/][surprisingly tedious]] on
Windows.

** Hardware Control

On laptops, you can control screen brightness from your keyboard. On desktops, you can not. However,
some clever hackers have put together [[https://github.com/waydabber/BetterDisplay#readme][BetterDisplay (OSS for screen brightness)]], which adds this
capability to MacOS. That's actually a capability I have wanted for quite a while, and apparently it
is only available in MacOS. Great stuff!

Less great is that MacOS does not allow volume control on external sound cards. [[https://rogueamoeba.com/soundsource/][SoundSource ($47)]]
adds this rather crucial functionality back, once you go through the unnecessarily excruciating
process of enabling custom kernel extensions. Windows and Linux of course natively support this.

Another necessary functionality for me is access to a non-sucky (i.e. no FAT) cross-platform file
system. At the moment, the most portable file system seems to be NTFS, of all things. Regrettably,
MacOS only supports /reading/ NTFS, but no writing. [[https://www.paragon-software.com/home/ntfs-mac/#][Paragon NTFS (€20)]] adds this with another kernel
extension, and promptly kernel-panicked my computer. Oh joy. At least it's only panicking for file
transfers initiated by DigiKam, which I can work around. Paragon Support says they're working on it.
I'm not holding my breath. Windows and Linux of course natively support NTFS.

** System Management

I have learned from experience not to trust graphical backup programs. TimeMachine in particular has
eaten my backups many times already, and can not be trusted. But I have used [[https://www.borgbackup.org/][Borg (OSS)]] for years,
and it has so far performed flawlessly. Even more impressive, my Borg backups have a continuous
history despite moving operating systems several times. It truly is wonderful software!

On Windows, I run Borg inside the WSL, and schedule its backups with the Windows Task Scheduler. On
Linux, I schedule them with systemd units. On MacOS, I install Borg with [[https://brew.sh/][Homebrew (OSS)]] and schedule
the backups with launchd tasks. It's all pretty equivalent. One nice thing about launchd, however,
is how the OS immediately pops up a notification if there's a new task file added, and adds the task
to the graphical system settings.

I have to emphasize what a game-changer the WSL is on Windows. Where previously, such simple
automations where a pain in the neck to do reliably, they're now the same simple shell scripts as on
other OSes. And it perfectly integrates with Windows programs as well, including passing pipes
between Linux and Windows programs. It's truly amazing! At the moment, I'd rate Windows a better
Unix system than MacOS for this reason. Homebrew is a passable package manager on MacOS, but the way
it's ill-integrated into the main system (not in system PATH) is a bit off-putting.

** App Compatibility

I generally use my computer for three tasks: General document stuff, photo editing, and video games.

One major downside of Apple computers is that video games aren't available. This has become less of
a problem to me since I bought a Steam Deck, which has taken over gaming duties from my main PC.
Absolutely astonishingly, the Steam Deck runs Windows games on /Linux/ through emulation, which
works almost flawlessly, making video games no longer a Windows-only proposition.

What doesn't work well on Linux are commercial applications. Wine generally does not play well with
them, and frustratingly for my photo editing, neither [[https://www.vmware.com/products/workstation-player.html][VMWare Workstation Player (free)]] nor
[[https://www.virtualbox.org/][VirtualBox (OSS)]] support hardware-accelerated VMs on up-to-date Linux[fn:VMs]. So where MacOS lacks
games, Linux lacks Photoshop. Desktop applications in general tend to be unnecessarily cumbersome to
manage and update on Linux. Flatpak is helping in this regard, by installing user-facing
applications outside of the OS package managers, but it remains more work than on Windows or MacOS.
The occasional scanner driver or camera interface app can also be troublesome on Linux, but that's
easily handled with a VirtualBox VM (with the proprietary /Extension Pack/ for USB2 support), and
hasn't really bothered me too much.

Luckily for me, my most-used apps are generally OSS tools such as [[https://www.darktable.org/][Darktable (OSS)]] and [[https://www.digikam.org/][DigiKam (OSS)]],
or cross-platform programs like [[https://fishshell.com/][Fish (OSS)]], [[https://git-scm.com/][Git (OSS)]], and [[https://www.gnu.org/software/emacs/][Emacs (OSS)]]. This is however, where
Windows has a bit of a sore spot, as these programs tend to perform noticeably worse on Windows than
on other platforms. Emacs and git in particular are just terribly slow on Windows, taking several
seconds for routine operations that are /instant/ on other platforms. That's probably due to
Windows' rather slow file system and malware scanner for the many-small-files style of file
management that these Unix tools implement. It is very annoying.

[fn:VMs] VirtualBox does not have a good accelerated driver, and VMWare does not support recent
kernels. Qemu /should/ be able to solve this problem, but I couldn't get it to work reliably.

** Conclusions

So there's just no perfect solution. MacOS can't do games, Linux can't run commercial applications,
and Windows is annoyingly slow for OSS applications. Regardless, I regularly use all three systems
productively. My job is mostly done on Windows, my home computer runs MacOS, and my Steam Deck and
automations run Linux.

Overall, I currently prefer MacOS as my desktop OS. It is surprisingly flexible, and more scriptable
than I thought, and in some ways is actually more functional than Linux or Windows. The integrated
calendar and contacts apps are nice, too, and not nearly as terrible as their Windows/Linux
counterparts. To say nothing of the amazing M1 hardware with its minuscule power draw and total
silence, while maintaining astonishing performance.

Linux is where I prefer to program, due to its sane command line and tremendously good
compiler/debugger/library infrastructure. As a desktop OS, it does have some rough edges, however,
especially for its lack of access to commercial applications. While Linux /should/ be the most
customizable of these three, I find things tend to break too easily, and customizations are often
scattered widely between many different subsystems, making them very hard to get right.

Theoretically, Windows is the most capable OS, supporting apps, OSS, and games. But it also feels
the most user-hostile of these three, and the least performant. And then there's the intrusive ads
everywhere, its spying on my every move, and at work there's inevitably a heavy-handed administrator
security setup that gets in the way of productivity. It's honestly fine on my home computer, at
least since they introduced the WSL. But using it for work every day is quite enough, so I don't
want to use it at home, too.
